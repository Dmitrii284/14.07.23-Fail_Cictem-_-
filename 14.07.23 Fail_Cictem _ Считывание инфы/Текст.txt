
решение по вопросу № 4 

За одну вставку понадобиться времени : ( Вот мы и узнаем как часто надо будет вставлять элементы в нашь файл)

array   -			|Сюда вставили ничего нельзя (Тут лучше просто меняет элементы)
vector				|-
list                |0(n) - По па
forward_list		|0(1) - ( при поиске очень долгий (Это ждать когда переберет все значения))
multiset			|0(log(n)) - Это квадратный логорифм - 14 Операций ( За ) ( Время поиска Такое же как время вставки (Одинаковое) Но произвольный доступ, вставка, Добавление ( Но все работает с одинаковой скоростью))
mulltimap			||0(log(n)) - Это квадратный логорифм - 14 Операций (то же самое) 
deque				|0(m)~1 - Для вставки всегда тратит одинаковое количество времени (Это 8 операций) ( По произвольному доступу, Это очень быстро (Не важно где он стоит) )
set					||0(log(n)) - Они Обычно работают с уникальностью значений работает ( Но мы не можем на Больше Меньше сравнивать объекты сруктур)
map					||0(log(n)) - Но по ключу МОЖНО на Больше Меньше сравнивать объекты сруктур ( Но работает с уникальными значениями)

list                |0(n) - Хорошо отработает 1 раз. ( Но когда нужен поис по коллекции ТО это займет много времени) - _если много операций поиска 
                       ТО лучше list не использовать (ОЧЕНЬ ДОЛГИЙ БУДЕТ)


array   -			|Сюда вставили ничего нельзя (Тут лучше просто меняет элементы)
vector				|-
list                |0(n) - По па
forward_list		|0(1)
multiset			|0(log(n)) - Это квадратный логорифм - 14 Операций ( За )
mulltimap			||0(log(n)) - Это квадратный логорифм - 14 Операций
deque				|0(m)~1 - Для вставки всегда тратит одинаковое количество времени (Это 8 операций)
set					||0(log(n)) - Они Обычно работают с уникальностью значений работает ( Но мы не можем на Больше Меньше сравнивать объекты сруктур)
map					||0(log(n)) - Но по ключу МОЖНО на Больше Меньше сравнивать объекты сруктур ( Но работает с уникальными значениями)

list                |0(n) - Хорошо отработает 1 раз. ( Но когда нужен поис по коллекции ТО это займет много времени) - _если много операций поиска 
                       ТО лучше list не использовать (ОЧЕНЬ ДОЛГИЙ БУДЕТ)


    Есть ограничения по памяти - используем deque
    Нет ограничений по памяти - используют vector

    ----- Если из коллекции всегда надо кого то убирать то Вектор работать будет очень долго а deque Очень быстро --- 
    deque - Это связный список динамических массивов (с Задонной за ранее длинны) Список отрезков